apply plugin: 'com.android.application'

//map映射集合
def cfg = rootProject.ext.android
def appid = rootProject.ext.appId
def dep = rootProject.ext.dependencies
def signingFilePath = 'signing.gradle'
def performSigning = file(signingFilePath).exists()
if (performSigning) {
    apply from: signingFilePath
}


android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId appid["app"]
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resConfigs 'en'
        ndk {
            abiFilters "armeabi", "x86"
        }
    }

    if (performSigning) {
        signingConfigs {
            release {
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            if (performSigning) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true
            shrinkResources false
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.all {
                def pkName = buildType.name.equals("release") ? "Zwan" : "Cwan"
                def fileName = pkName + "_v" + defaultConfig.versionName + "_${currentDate()}" + rootProject.ext.buildPackageNum + ".apk"
                outputFileName = fileName
            }
    }

}

def currentDate() {
    return new Date().format("yyyy_MM_dd_", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //    debugImplementation project(path: ':Lib-MVP', configuration: 'debug')
    //    releaseImplementation project(path: ':Lib-MVP', configuration: 'release')
//    compile project(':Lib-MVP')
    //-----------base------------
    compile dep["appcompat-v7"]
    compile dep["design"]
    compile 'com.android.support:recyclerview-v7:28.0.0'
    compile('com.android.support:support-v4:28.0.0') {
        force = true;
    }
    compile dep["constraint-layout"]
    //-----------rx------------
    compile dep["rxjava"]
    compile dep["rxandroid"]
//    implementation rootProject.ext.dependencies["rxbinding"]
    compile dep["rxpermissions"]

    //------------di-----------
    compile dep["butterknife"]
    annotationProcessor dep["butterknife-compiler"]
}
